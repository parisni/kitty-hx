#!/usr/bin/env bash
set -eo pipefail

export SHELL="$(command -v bash)"

# Colors
CATPPUCCIN_GREEN='#a6da95'
CATPPUCCIN_MAUVE='#c6a0f6'

# Key bindings
COPY_FILE_PATH='ctrl-y:execute(echo -n {1}:{2} | tee >(copyq add -) | copyq copy -)'
KEYS="$COPY_FILE_PATH"

# Parse arguments
INITIAL_QUERY=""
EXIT_ON_EXECUTION=false
SEARCH_DIR=""
OPEN_IN_HELIX=false
QUIT_YAZI=false

while [[ $# -gt 0 ]]; do
  case $1 in
    --exit-on-execution)
      EXIT_ON_EXECUTION=true
      KEYS="$KEYS+abort"
      shift
      ;;
    --query)
      INITIAL_QUERY="$2"
      shift 2
      ;;
    --search-dir)
      SEARCH_DIR="$2"
      shift 2
      ;;
    --open-in-helix)
      OPEN_IN_HELIX=true
      shift
      ;;
    --quit-yazi)
      QUIT_YAZI=true
      shift
      ;;
    *)
      break
      ;;
  esac
done

IFS=$'\n' readarray -t selected_matches < <(
  rg --color=always --line-number --no-heading --smart-case "${*:-}" ${SEARCH_DIR:+$SEARCH_DIR} |
    fzf --ansi \
      --border \
      --color "hl+:$CATPPUCCIN_GREEN:reverse,hl:$CATPPUCCIN_MAUVE:reverse" \
      --delimiter ':' \
      --height '100%' \
      --multi \
      --exact \
      --print-query \
      --preview 'bash -c "L={2}; batcat {1} --theme=\"Solarized (light)\" --color=always --plain --highlight-line \$L --line-range \$((L>10 ? L-10 : 1)):"' \
      --scrollbar '‚ñç' \
      --bind "$KEYS" \
      --bind 'ctrl-j:preview-down' \
      --bind 'ctrl-k:preview-up' \
      ${INITIAL_QUERY:+--query "$INITIAL_QUERY"}
)

# Extract file paths and line numbers
file_paths=()
for line in "${selected_matches[@]:1}"; do
  file=$(echo "$line" | cut -d: -f1)
  line_number=$(echo "$line" | cut -d: -f2)
  file_paths+=("$file:$line_number")
done

# If --open-in-helix flag is set, open files in helix
if [[ "$OPEN_IN_HELIX" == true && ${#file_paths[@]} -gt 0 ]]; then
  # Get the current focused OS window ID
  CURRENT_WIN_ID=$(kitty @ ls | jq -r '.[] | select(.is_focused == true) | .id')
  
  # Get the helix tab's window ID from the current window only
  HELIX_WINDOW_ID=$(kitty @ ls | jq -r --arg win "$CURRENT_WIN_ID" '
    .[] 
    | select(.id == ($win | tonumber))
    | .tabs[]
    | .windows[]
    | select(.foreground_processes[]?.cmdline[0] == "hx")
    | .id' | head -1)
  
  if [[ -n "$HELIX_WINDOW_ID" ]]; then
    # Join file paths with spaces for helix command
    FILE_PATHS_STR=$(printf '%s ' "${file_paths[@]}" | sed 's/ *$//')
    # Send all commands in one go: enter command mode, open files, execute
    kitty @ send-text --match id:"$HELIX_WINDOW_ID" ":open $FILE_PATHS_STR"$'\r'
    
    # If --quit-yazi flag is set, quit yazi
    if [[ "$QUIT_YAZI" == true ]]; then
      # Find the yazi tab and send quit command (look for tabs starting with "tree")
      YAZI_WINDOW_ID=$(kitty @ ls | jq -r --arg win "$CURRENT_WIN_ID" '
        .[] 
        | select(.id == ($win | tonumber))
        | .tabs[]
        | select(.title | startswith("tree"))
        | .windows[0]
        | .id')
      
      if [[ -n "$YAZI_WINDOW_ID" ]]; then
        kitty @ send-text --match id:"$YAZI_WINDOW_ID" 'q'
      fi
    fi
  fi
fi

