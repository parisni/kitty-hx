#!/usr/bin/env bash
set -eo pipefail

export SHELL="$(command -v bash)"

# Clean up any previous results
rm -f /tmp/kittyx-live-grep-result /tmp/kittyx-live-grep-query /tmp/kittyx-tree-result

# Colors
CATPPUCCIN_GREEN='#a6da95'
CATPPUCCIN_MAUVE='#c6a0f6'

# Key bindings
KEYS="ctrl-y:execute(echo -n {1}:{2} | tee >(copyq add -) | copyq copy -)"

# Parse arguments
INITIAL_QUERY=""
EXIT_ON_EXECUTION=false
SEARCH_PATH=""
OPEN_IN_HELIX=false
QUIT_TREE=false

while [[ $# -gt 0 ]]; do
  case $1 in
    --query)
      INITIAL_QUERY="$2"
      shift 2
      ;;
    --search-path)
      SEARCH_PATH="$2"
      shift 2
      ;;
    --open-in-helix)
      OPEN_IN_HELIX=true
      shift
      ;;
    --quit-tree)
      QUIT_TREE=true
      shift
      ;;
    *)
      break
      ;;
  esac
done

IFS=$'\n' readarray -t selected_matches < <(
  rg --color=always --line-number --no-heading --with-filename --smart-case "${*:-}" ${SEARCH_PATH:+$SEARCH_PATH} | rg -v '^[^:]*:[^:]*:\s*$' |
    fzf --ansi \
      --cycle \
      --border \
      --color "hl+:$CATPPUCCIN_GREEN:reverse,hl:$CATPPUCCIN_MAUVE:reverse" \
      --delimiter ':' \
      --height '100%' \
      --exact \
      --print-query \
      --preview 'bash -c "L={2}; FILE={1}; [[ -f \"\$FILE\" ]] && batcat \"\$FILE\" --theme=\"Solarized (light)\" --color=always --plain --highlight-line \$L --line-range \$((L>10 ? L-10 : 1)): || echo \"File not found: \$FILE\""' \
      --preview-window 'up,60%' \
      --scrollbar '▍' \
      --bind "$KEYS" \
      --bind 'ctrl-j:preview-down' \
      --bind 'ctrl-k:preview-up' \
      ${INITIAL_QUERY:+--query "$INITIAL_QUERY"}
)

# Extract the single selected file path and line number
if [[ ${#selected_matches[@]} -gt 1 ]]; then
  selected_line="${selected_matches[1]}"
  file=$(echo "$selected_line" | cut -d: -f1)
  line_number=$(echo "$selected_line" | cut -d: -f2)
  file_path="$file:$line_number"
  
  # Print the file path (for backward compatibility)
  echo "$file_path"
else
  file_path=""
fi

# If --open-in-helix flag is set, write selected file to result file and handle yazi
if [[ "$OPEN_IN_HELIX" == true && -n "$file_path" ]]; then
  # Choose result file path based on whether we're called from yazi
  if [[ "$QUIT_TREE" == true ]]; then
    # When called from yazi, use tree result path for consistency
    echo "$file_path" > /tmp/kittyx-tree-result
  else
    # When called standalone, use live-grep result path
    echo "$file_path" > /tmp/kittyx-live-grep-result
  fi
  
  # If --quit-tree flag is set, quit tree
  if [[ "$QUIT_TREE" == true ]]; then
    # Get the current focused OS window ID
    CURRENT_WIN_ID=$(kitty @ ls | jq -r '.[] | select(.is_focused == true) | .id')
    
    # Find the tree tab and send quit command (look for tabs starting with "tree")
    TREE_WINDOW_ID=$(kitty @ ls | jq -r --arg win "$CURRENT_WIN_ID" '
      .[] 
      | select(.id == ($win | tonumber))
      | .tabs[]
      | select(.title | startswith("tree"))
      | .windows[0]
      | .id')
    
    if [[ -n "$TREE_WINDOW_ID" ]]; then
      kitty @ send-text --match id:"$TREE_WINDOW_ID" 'q'
    fi
  fi
fi

