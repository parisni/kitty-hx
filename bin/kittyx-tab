#!/usr/bin/env bash
set -eo pipefail

export SHELL="$(command -v bash)"

SCRIPT_NAME="$1"

if [[ -z "$SCRIPT_NAME" ]]; then
  echo "Error: Must provide a script name."
  echo "Usage: kittyx-tab <script-name> [args...]"
  echo "Example: kittyx-tab git-file /path/to/file"
  exit 1
fi

# Check if the target script exists
TARGET_SCRIPT="kittyx-$SCRIPT_NAME"
SCRIPT_PATH="$(dirname "$0")/$TARGET_SCRIPT"

if [[ ! -f "$SCRIPT_PATH" ]]; then
  echo "Error: Script '$TARGET_SCRIPT' not found in bin directory."
  exit 1
fi

# Parse generic arguments that kittyx-tab handles
FILEPATH=""
OPEN_IN_HELIX=false
QUIT_TREE=false
OTHER_ARGS=()

shift # Remove script name
while [[ $# -gt 0 ]]; do
  case $1 in
    --filepath)
      FILEPATH="$2"
      shift 2
      ;;
    --open-in-helix)
      OPEN_IN_HELIX=true
      shift
      ;;
    --quit-tree)
      QUIT_TREE=true
      shift
      ;;
    *)
      OTHER_ARGS+=("$1")
      shift
      ;;
  esac
done

# Check if there's a query file
QUERY=""
if [[ -f "/tmp/kittyx-$SCRIPT_NAME-query" ]]; then
  QUERY=$(cat "/tmp/kittyx-$SCRIPT_NAME-query" | tr -d '\n')
fi

# Build the command
TARGET_COMMAND="$TARGET_SCRIPT"

# Add --open-in-helix if requested
if [[ "$OPEN_IN_HELIX" == true ]]; then
  TARGET_COMMAND="$TARGET_COMMAND --open-in-helix"
fi

# Add query if provided
if [[ -n "$QUERY" ]]; then
  TARGET_COMMAND="$TARGET_COMMAND --query \"$QUERY\""
fi

# Add search path if filepath provided
if [[ -n "$FILEPATH" ]]; then
  if [[ -f "$FILEPATH" || -d "$FILEPATH" ]]; then
    TARGET_COMMAND="$TARGET_COMMAND --search-path \"$FILEPATH\""
  else
    echo "Error: File path '$FILEPATH' does not exist."
    exit 1
  fi
fi

# Add quit-tree flag if requested
if [[ "$QUIT_TREE" == true ]]; then
  TARGET_COMMAND="$TARGET_COMMAND --quit-tree"
fi

# Add any other arguments
if [[ ${#OTHER_ARGS[@]} -gt 0 ]]; then
  TARGET_COMMAND="$TARGET_COMMAND $(printf '%q ' "${OTHER_ARGS[@]}")"
fi

# Build the title - use script name and show arguments if any
if [[ $# -gt 0 ]]; then
  TITLE="$SCRIPT_NAME $*"
else
  TITLE="$SCRIPT_NAME"
fi

# Clean up any previous result file
RESULT_FILE="/tmp/kittyx-$SCRIPT_NAME-result"
rm -f "$RESULT_FILE"

kitty @ launch \
  --type=tab \
  --title="$TITLE" \
  --cwd=current \
  --wait-for-child-to-exit \
  -- bash -c "$TARGET_COMMAND" >/dev/null 2>&1

# After the tab closes, output the result if it exists  
RESULT_FILE="/tmp/kittyx-$SCRIPT_NAME-result"
if [[ -f "$RESULT_FILE" ]]; then
  cat "$RESULT_FILE"
fi
