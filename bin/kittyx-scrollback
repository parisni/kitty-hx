#!/usr/bin/env bash
set -eo pipefail

export SHELL="$(command -v bash)"

# Create temporary files
tmpfile=$(mktemp /dev/shm/hx-stdin-XXXXXX)
configfile="/tmp/kittyx-scrollback-config.toml"

# Cleanup function
cleanup() {
    [[ -f "$tmpfile" ]] && rm -f "$tmpfile"
    [[ -f "$configfile" ]] && rm -f "$configfile"
}
trap cleanup EXIT

# Read stdin to temporary file
cat > "$tmpfile"

# Default position and flag to track if we got cursor data
line_num=1
has_cursor_data=false

# Detect if we're running inside an editor by checking all windows in current tab
is_editor=false
if [[ -n "$KITTY_WINDOW_ID" ]]; then
    # Check all windows in the current tab for editor processes
    all_tab_processes=$(kitty @ ls | jq -r ".[] | .tabs[] | select(.windows[].id == $KITTY_WINDOW_ID) | .windows[].foreground_processes[]?.cmdline[0]" 2>/dev/null || echo "")
    
    # Look for editors/pagers/TUIs in any foreground process in the current tab
    while IFS= read -r cmd; do
        if [[ "$cmd" =~ ^(vim|vi|nvim|helix|hx|nano|emacs|less|bat|lazygit|yazi|scooter)$ ]]; then
            is_editor=true
            break
        fi
    done <<< "$all_tab_processes"
fi

# Parse KITTY_PIPE_DATA if available
if [[ -n "$KITTY_PIPE_DATA" ]]; then
    IFS=':' read -r scrolled_by coords linecol <<< "$KITTY_PIPE_DATA"
    
    if [[ -n "$coords" && -n "$scrolled_by" ]]; then
        IFS=',' read -r cursor_x cursor_y <<< "$coords"
        IFS=',' read -r screen_rows screen_cols <<< "$linecol"
        
        if [[ -n "$cursor_y" && "$scrolled_by" =~ ^[0-9]+$ && "$cursor_y" =~ ^[0-9]+$ && -n "$screen_rows" ]]; then
            # Get total lines in the scrollback content
            total_lines=$(wc -l < "$tmpfile")
            
            # Use different calculation based on whether we're in an editor
            if [[ "$is_editor" == true ]]; then
                # Inside editor: use cursor position directly
                calculated_line=$cursor_y
            else
                # Regular terminal: use complex calculation accounting for helix UI
                helix_center_offset=$((screen_rows / 2 - 2))
                calculated_line=$((total_lines - scrolled_by - screen_rows + cursor_y - helix_center_offset))
            fi
            
            # Ensure line number is never less than 1
            line_num=$((calculated_line < 1 ? 1 : calculated_line))
            has_cursor_data=true
        fi
    fi
fi

# Use cursor position if available, otherwise fallback to last non-empty line
target_line="$line_num"
if [[ "$has_cursor_data" == false ]]; then
    # No cursor position available, use last non-empty line as fallback
    last_line=$(rg -n '\S' "$tmpfile" | tail -1 | cut -d: -f1)
    target_line="${last_line:-1}"
fi

# Create custom config by copying default and adding q mapping
if [[ -f ~/.config/helix/config.toml ]]; then
    cp ~/.config/helix/config.toml "$configfile"
    
    # Add editor configuration for clean scrollback viewing
    if rg -q '^\[editor\]' "$configfile"; then
        # Replace existing gutters setting or add if not present
        if rg -q '^gutters\s*=' "$configfile"; then
            sed -i 's/^gutters\s*=.*/gutters = []/' "$configfile"
        else
            sed -i '/^\[editor\]/a gutters = []' "$configfile"
        fi
        
        # Remove any soft-wrap setting to disable wrapping
        sed -i '/^soft-wrap\s*=/d' "$configfile"
    else
        # Create new [editor] section
        echo "" >> "$configfile"
        echo "[editor]" >> "$configfile"
        echo 'gutters = []' >> "$configfile"
    fi
    
    # Add indent-guides configuration
    if rg -q '^\[editor\.indent-guides\]' "$configfile"; then
        # Replace existing render setting or add if not present
        if rg -q '^render\s*=' "$configfile"; then
            sed -i 's/^render\s*=.*/render = false/' "$configfile"
        else
            sed -i '/^\[editor\.indent-guides\]/a render = false' "$configfile"
        fi
    else
        echo "" >> "$configfile"
        echo "[editor.indent-guides]" >> "$configfile"
        echo 'render = false' >> "$configfile"
    fi
    
    # Check if [keys.normal] section exists
    if rg -q '^\[keys\.normal\]' "$configfile"; then
        # Add q mapping after existing [keys.normal] section
        sed -i '/^\[keys\.normal\]/a q = ":quit!"' "$configfile"
        
        # Add y mapping to [keys.select] section if it exists, otherwise create it
        if rg -q '^\[keys\.select\]' "$configfile"; then
            sed -i '/^\[keys\.select\]/a y = "yank_main_selection_to_clipboard"' "$configfile"
        else
            echo "" >> "$configfile"
            echo "[keys.select]" >> "$configfile"
            echo 'y = "yank_main_selection_to_clipboard"' >> "$configfile"
        fi
    else
        # Append new [keys.normal] section
        echo "" >> "$configfile"
        echo "[keys.normal]" >> "$configfile"
        echo 'q = ":quit!"' >> "$configfile"
        echo "" >> "$configfile"
        echo "[keys.select]" >> "$configfile"
        echo 'y = "yank_main_selection_to_clipboard"' >> "$configfile"
    fi
else
    # If no default config, create minimal one
    cat > "$configfile" <<EOF
[editor]
gutters = []

[editor.indent-guides]
render = false

[keys.normal]
q = ":quit!"

[keys.select]
y = "yank_main_selection_to_clipboard"
EOF
fi

# Launch helix with position using custom config
exec hx "+$target_line" "$tmpfile" --config "$configfile" < /dev/null
