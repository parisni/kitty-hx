#!/usr/bin/env bash
set -eo pipefail

export SHELL="$(command -v bash)"

# Create temporary files
tmpfile=$(mktemp /dev/shm/hx-stdin-XXXXXX)
configfile="/tmp/kittyx-scrollback-config.toml"

# Cleanup function
cleanup() {
    [[ -f "$tmpfile" ]] && rm -f "$tmpfile"
    [[ -f "$configfile" ]] && rm -f "$configfile"
}
trap cleanup EXIT

# Read stdin to temporary file
cat > "$tmpfile"

# Default position
line_num=1

# Parse KITTY_PIPE_DATA if available
if [[ -n "$KITTY_PIPE_DATA" ]]; then
    IFS=':' read -r scrolled_by coords linecol <<< "$KITTY_PIPE_DATA"
    
    if [[ -n "$coords" ]]; then
        IFS=',' read -r cursor_x cursor_y <<< "$coords"
        line_num="${cursor_y:-1}"
    fi
fi

# Get window title to determine behavior
target_line="$line_num"
if [[ -n "$KITTY_WINDOW_ID" ]]; then
    title=$(kitty @ ls | jq -r ".[] | .tabs[].windows[] | select(.id == $KITTY_WINDOW_ID) | .title" 2>/dev/null || echo "")
    
    # If not vim/less, jump to last non-empty line
    if [[ ! "$title" =~ (vim|less) ]]; then
        # Use rg to find last non-empty line number
        last_line=$(rg -n '\S' "$tmpfile" | tail -1 | cut -d: -f1)
        last_line=${last_line:-1}
        target_line="$last_line"
    fi
fi

# Create custom config by copying default and adding q mapping
if [[ -f ~/.config/helix/config.toml ]]; then
    cp ~/.config/helix/config.toml "$configfile"
    
    # Add editor configuration for clean scrollback viewing
    if rg -q '^\[editor\]' "$configfile"; then
        # Replace existing gutters setting or add if not present
        if rg -q '^gutters\s*=' "$configfile"; then
            sed -i 's/^gutters\s*=.*/gutters = []/' "$configfile"
        else
            sed -i '/^\[editor\]/a gutters = []' "$configfile"
        fi
    else
        # Create new [editor] section
        echo "" >> "$configfile"
        echo "[editor]" >> "$configfile"
        echo 'gutters = []' >> "$configfile"
    fi
    
    # Add indent-guides configuration
    if rg -q '^\[editor\.indent-guides\]' "$configfile"; then
        # Replace existing render setting or add if not present
        if rg -q '^render\s*=' "$configfile"; then
            sed -i 's/^render\s*=.*/render = false/' "$configfile"
        else
            sed -i '/^\[editor\.indent-guides\]/a render = false' "$configfile"
        fi
    else
        echo "" >> "$configfile"
        echo "[editor.indent-guides]" >> "$configfile"
        echo 'render = false' >> "$configfile"
    fi
    
    # Check if [keys.normal] section exists
    if rg -q '^\[keys\.normal\]' "$configfile"; then
        # Add q mapping after existing [keys.normal] section
        sed -i '/^\[keys\.normal\]/a q = ":quit!"' "$configfile"
        
        # Add y mapping to [keys.select] section if it exists, otherwise create it
        if rg -q '^\[keys\.select\]' "$configfile"; then
            sed -i '/^\[keys\.select\]/a y = "yank_main_selection_to_clipboard"' "$configfile"
        else
            echo "" >> "$configfile"
            echo "[keys.select]" >> "$configfile"
            echo 'y = "yank_main_selection_to_clipboard"' >> "$configfile"
        fi
    else
        # Append new [keys.normal] section
        echo "" >> "$configfile"
        echo "[keys.normal]" >> "$configfile"
        echo 'q = ":quit!"' >> "$configfile"
        echo "" >> "$configfile"
        echo "[keys.select]" >> "$configfile"
        echo 'y = "yank_main_selection_to_clipboard"' >> "$configfile"
    fi
else
    # If no default config, create minimal one
    cat > "$configfile" <<EOF
[editor]
gutters = []

[editor.indent-guides]
render = false

[keys.normal]
q = ":quit!"

[keys.select]
y = "yank_main_selection_to_clipboard"
EOF
fi

# Launch helix with position using custom config
exec hx "+$target_line" "$tmpfile" --config "$configfile" < /dev/null
